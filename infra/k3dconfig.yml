apiVersion: k3d.io/v1alpha5
kind: Simple
metadata:
  name: ${USERNAME}
network: infra_default
kubeAPI: # same as `--api-port myhost.my.domain:6445` (where the name would resolve to 127.0.0.1)
  host: "${USERNAME}.k3s.mdics.me" # important for the `server` setting in the kubeconfig
  hostIP: "127.0.0.1" # where the Kubernetes API will be listening on
options:
  runtime:
    labels:
      - label: traefik.enable=true
        nodeFilters:
          - loadbalancer
      - label: traefik.http.routers.${USERNAME}-loadbalancer.rule=Host(`*.${USERNAME}.k3s.mdics.me`)
        nodeFilters:
          - loadbalancer
      - label: traefik.http.routers.${USERNAME}-loadbalancer.entrypoints=web
        nodeFilters:
          - loadbalancer
      - label: traefik.http.services.${USERNAME}-loadbalancer.loadbalancer.server.port=80
        nodeFilters:
          - loadbalancer
      - label: traefik.http.routers.${USERNAME}-loadbalancer.service=${USERNAME}-loadbalancer
        nodeFilters:
          - loadbalancer
      - label: traefik.tcp.routers.${USERNAME}-api.rule=HostSNI(`${USERNAME}.k3s.mdics.me`)
        nodeFilters:
          - loadbalancer
      - label: traefik.tcp.routers.${USERNAME}-api.entrypoints=kubeapi
        nodeFilters:
          - loadbalancer
      - label: traefik.tcp.routers.${USERNAME}-api.tls.passthrough=true
        nodeFilters:
          - loadbalancer
      - label: traefik.tcp.services.${USERNAME}-api.loadbalancer.server.port=6443
        nodeFilters:
          - loadbalancer
      - label: traefik.tcp.routers.${USERNAME}-api.service=${USERNAME}-api
        nodeFilters:
          - loadbalancer